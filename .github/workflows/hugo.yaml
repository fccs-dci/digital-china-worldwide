# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
      MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Download backend data
        run: |
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            response=$(curl -s -w "\n%{http_code}" -X POST https://backend.dcw.fairbankcenter.org/graphql \
              -H "Content-Type: application/json" \
              -d '{"query": "query { pages { id slug date_updated translations { id languages_code { code } content } } resources { id slug status title url abbreviation date_updated creator { id } translations { id title_translated languages_code { code } summary description content_status } creator { creators_id { id } } } creators { id slug status title url abbreviation date_updated translations { id title_translated languages_code { code } description } } }"}' \
              --max-time 300 \
              --retry 3 \
              --retry-delay 5 \
              --retry-max-time 60)
            
            http_code=$(echo "$response" | tail -n1)
            content=$(echo "$response" | sed '$d')
            
            if [ "$http_code" = "200" ]; then
              if echo "$content" | jq -e . >/dev/null 2>&1; then
                if ! echo "$content" | jq -e '.errors' >/dev/null 2>&1; then
                  echo "$content" > data/all.json
                  echo "Download successful"
                  break
                else
                  echo "GraphQL returned errors:"
                  echo "$content" | jq '.errors'
                fi
              else
                echo "Response is not valid JSON:"
                echo "$content"
              fi
            else
              echo "Download failed. HTTP Code: $http_code"
              echo "Response: $content"
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "Max attempts reached. Failing the workflow."
              exit 1
            fi
            
            sleep 30
            attempt=$((attempt+1))
          done
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Delete existing Meilisearch index
        run: |
            curl --request DELETE \
            --url https://dcw-meilisearch.dcw.fairbankcenter.org/indexes/dcw \
            --header "Authorization: Bearer $MEILISEARCH_API_KEY"
      - name: Upload new index files to Meilisearch
        run: |
            for lang_folder in public/*/; do
                if [ -f "${lang_folder}index.json" ]; then
                  lang=$(basename "$lang_folder")
                  echo "Uploading index for language: $lang"
                  curl --request POST \
                    --url https://dcw-meilisearch.dcw.fairbankcenter.org/indexes/dcw/documents \
                    --header "Authorization: Bearer $MEILISEARCH_API_KEY" \
                    --header "Content-Type: application/json" \
                    --data @"${lang_folder}index.json"
                fi
            done
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4